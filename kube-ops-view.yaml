---
# Source: kube-ops-view/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-ops-view
---
# Source: kube-ops-view/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-ops-view
rules:
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["list"]
---
# Source: kube-ops-view/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-ops-view
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-ops-view
subjects:
  - kind: ServiceAccount
    name: kube-ops-view
    namespace: default
---
# Source: kube-ops-view/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-ops-view
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-ops-view
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-ops-view
    spec:
      serviceAccountName: kube-ops-view
      containers:
      - name: kube-ops-view
        image: "hjacobs/kube-ops-view:20.4.0"
        imagePullPolicy: IfNotPresent
        # env: 
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 80m
              memory: 64Mi
---
# Source: kube-ops-view/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kube-ops-view
  labels:
    app.kubernetes.io/name: kube-ops-view
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: kube-ops-view